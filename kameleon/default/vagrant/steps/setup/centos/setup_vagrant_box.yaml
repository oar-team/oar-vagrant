- reboot_timeout: 100

- enable_passwordless_sudo:
  - exec_in: |
      sed -i "s/^.*requiretty/#Defaults requiretty/" /etc/sudoers
      echo "$$user_name ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

- set_root_password:
  - exec_in: echo -n 'root:$$user_name' | chpasswd

- install_puppet:
  - write_in:
    - /etc/yum.repos.d/puppetlabs.repo
    - |
      [puppetlabs-dependencies]
      name=puppetlabdsdependencies
      baseurl=http://yum.puppetlabs.com/el/$${release}/dependencies/\$basearch
      enabled=1
      gpgcheck=0
      [puppetlabs]
      name=puppetlabs
      baseurl=http://yum.puppetlabs.com/el/$${release}/products/\$basearch
      enabled=1
      gpgcheck=0
  - exec_in: echo "Installing puppet..."
  - exec_in: yum -y install puppet facter ruby-shadow 2>&1

- install_chef:
  - exec_in: curl -L https://www.opscode.com/chef/install.sh -k | bash

- copy_insecure_sshkey:
  - exec_in: mkdir -pm 700 /home/$$user_name/.ssh/
  - exec_in: |
      wget --progress=bar:force https://raw.github.com/mitchellh/vagrant/master/keys/vagrant -O /home/$$user_name/.ssh/id_rsa 2>&1
      wget --progress=bar:force https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub -O /home/$$user_name/.ssh/id_rsa.pub 2>&1
  - exec_in: cp /home/$$user_name/.ssh/id_rsa.pub /home/$$user_name/.ssh/authorized_keys
  - exec_in: chmod 0600 /home/$$user_name/.ssh/*

- config_ssh:
  - exec_in: echo "UseDNS no" >> /etc/ssh/sshd_config
  - write_in:
    - /home/$$user_name/.ssh/config
    - |
      Host *
      ForwardX11 no
      StrictHostKeyChecking no
      PasswordAuthentication no
      AddressFamily inet
  - exec_in: chmod 0600 /home/$$user_name/.ssh/config
  - exec_in: rsync -ah /home/$$user_name/.ssh/ /root/.ssh/
  - exec_in: chown "$$user_name:$$user_name" -R /home/$$user_name

- customize_motd:
  - exec_in: echo 'Welcome to your Vagrant-built virtual machine.' > /etc/motd

- cleanup:
  - exec_in: rm -rf /tmp/* || true
  - exec_in: rm -rf /var/tmp/* || true
  - exec_in: echo "Remove traces of mac address from network configuration"
  - exec_in: sed -i /HWADDR/d /etc/sysconfig/network-scripts/ifcfg-eth0
  - exec_in: rm -f /etc/udev/rules.d/70-persistent-net.rules

- reboot_vm:
  - exec_local: echo "Rebooting virtualbox vm ($$virtualbox_vmid)"
  - exec_local: VBoxManage controlvm $$virtualbox_vmid poweroff 2>&1
  - exec_local: VBoxManage modifyvm $$virtualbox_vmid --boot1 disk
  - exec_local: VBoxManage modifyvm $$virtualbox_vmid --boot2 dvd
  - exec_local: VBoxManage startvm  $$virtualbox_vmid --type headless 2>&1
  - exec_local: |
        SSH_AVAILABLE=0
        TIMEOUT=$(( $(date +%s) + $$reboot_timeout ))
        until timeout 2 ssh -q -F $$ssh_config_file -o ConnectTimeout=1 -o ConnectionAttempts=1  $${kameleon_recipe_name} -t true && SSH_AVAILABLE=1 || [ $(date +%s) -gt $TIMEOUT ];
        do
          echo -en "\rWaiting for SSH to become available for out_context...($(( TIMEOUT - $(date +%s) ))s)"
          sleep 1
        done
        echo ""
  - rescue:
    - exec_local: test $SSH_AVAILABLE -eq 1
    - breakpoint: Failed to connect to VM via SSH. Please verify the VM successfully booted by looking at the VirtualBox GUI.

  - reload_context: out
  - reload_context: in

- nullify_freespace:
  - exec_in: |
      echo "Nullify freespace..."
      dd if=/dev/zero of=/bigemptyfile bs=1M 2>&1 >/dev/null || true
      rm -f /bigemptyfile
